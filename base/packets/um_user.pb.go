// Code generated by protoc-gen-go. DO NOT EDIT.
// source: um_user.proto

package packets

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserRequest struct {
	Data                 *any.Any `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a77506c20413422, []int{0}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type UpdateUserRequest struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Data                 *any.Any `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateUserRequest) Reset()         { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()    {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a77506c20413422, []int{1}
}

func (m *UpdateUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateUserRequest.Unmarshal(m, b)
}
func (m *UpdateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateUserRequest.Marshal(b, m, deterministic)
}
func (m *UpdateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserRequest.Merge(m, src)
}
func (m *UpdateUserRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateUserRequest.Size(m)
}
func (m *UpdateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserRequest proto.InternalMessageInfo

func (m *UpdateUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateUserRequest) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserRequestByID struct {
	UserID               string   `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequestByID) Reset()         { *m = UserRequestByID{} }
func (m *UserRequestByID) String() string { return proto.CompactTextString(m) }
func (*UserRequestByID) ProtoMessage()    {}
func (*UserRequestByID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a77506c20413422, []int{2}
}

func (m *UserRequestByID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequestByID.Unmarshal(m, b)
}
func (m *UserRequestByID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequestByID.Marshal(b, m, deterministic)
}
func (m *UserRequestByID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequestByID.Merge(m, src)
}
func (m *UserRequestByID) XXX_Size() int {
	return xxx_messageInfo_UserRequestByID.Size(m)
}
func (m *UserRequestByID) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequestByID.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequestByID proto.InternalMessageInfo

func (m *UserRequestByID) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type UserRequestByUsername struct {
	Username             string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequestByUsername) Reset()         { *m = UserRequestByUsername{} }
func (m *UserRequestByUsername) String() string { return proto.CompactTextString(m) }
func (*UserRequestByUsername) ProtoMessage()    {}
func (*UserRequestByUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a77506c20413422, []int{3}
}

func (m *UserRequestByUsername) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequestByUsername.Unmarshal(m, b)
}
func (m *UserRequestByUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequestByUsername.Marshal(b, m, deterministic)
}
func (m *UserRequestByUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequestByUsername.Merge(m, src)
}
func (m *UserRequestByUsername) XXX_Size() int {
	return xxx_messageInfo_UserRequestByUsername.Size(m)
}
func (m *UserRequestByUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequestByUsername.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequestByUsername proto.InternalMessageInfo

func (m *UserRequestByUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type OutputUser struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Data                 *any.Any `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutputUser) Reset()         { *m = OutputUser{} }
func (m *OutputUser) String() string { return proto.CompactTextString(m) }
func (*OutputUser) ProtoMessage()    {}
func (*OutputUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a77506c20413422, []int{4}
}

func (m *OutputUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputUser.Unmarshal(m, b)
}
func (m *OutputUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputUser.Marshal(b, m, deterministic)
}
func (m *OutputUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputUser.Merge(m, src)
}
func (m *OutputUser) XXX_Size() int {
	return xxx_messageInfo_OutputUser.Size(m)
}
func (m *OutputUser) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputUser.DiscardUnknown(m)
}

var xxx_messageInfo_OutputUser proto.InternalMessageInfo

func (m *OutputUser) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OutputUser) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserRequestByIdOrganization struct {
	OrganizationId       string   `protobuf:"bytes,1,opt,name=OrganizationId,proto3" json:"OrganizationId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequestByIdOrganization) Reset()         { *m = UserRequestByIdOrganization{} }
func (m *UserRequestByIdOrganization) String() string { return proto.CompactTextString(m) }
func (*UserRequestByIdOrganization) ProtoMessage()    {}
func (*UserRequestByIdOrganization) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a77506c20413422, []int{5}
}

func (m *UserRequestByIdOrganization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequestByIdOrganization.Unmarshal(m, b)
}
func (m *UserRequestByIdOrganization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequestByIdOrganization.Marshal(b, m, deterministic)
}
func (m *UserRequestByIdOrganization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequestByIdOrganization.Merge(m, src)
}
func (m *UserRequestByIdOrganization) XXX_Size() int {
	return xxx_messageInfo_UserRequestByIdOrganization.Size(m)
}
func (m *UserRequestByIdOrganization) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequestByIdOrganization.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequestByIdOrganization proto.InternalMessageInfo

func (m *UserRequestByIdOrganization) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "packets.UserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "packets.UpdateUserRequest")
	proto.RegisterType((*UserRequestByID)(nil), "packets.UserRequestByID")
	proto.RegisterType((*UserRequestByUsername)(nil), "packets.UserRequestByUsername")
	proto.RegisterType((*OutputUser)(nil), "packets.OutputUser")
	proto.RegisterType((*UserRequestByIdOrganization)(nil), "packets.UserRequestByIdOrganization")
}

func init() { proto.RegisterFile("um_user.proto", fileDescriptor_6a77506c20413422) }

var fileDescriptor_6a77506c20413422 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x51, 0x6b, 0xe2, 0x40,
	0x10, 0xc7, 0xcf, 0xe3, 0xf4, 0xce, 0x91, 0xbb, 0xc3, 0x9c, 0x1e, 0x9e, 0x07, 0x72, 0x84, 0xa3,
	0xd8, 0x97, 0x08, 0xfa, 0xd0, 0x42, 0x5f, 0xaa, 0x89, 0x14, 0xa1, 0xd4, 0x36, 0x25, 0x2f, 0x85,
	0x52, 0x56, 0x33, 0x8d, 0xa2, 0x26, 0x31, 0xbb, 0x4b, 0xb1, 0x5f, 0xb3, 0x5f, 0xa8, 0x64, 0xdd,
	0xc4, 0x44, 0x0c, 0xc5, 0xbc, 0xe5, 0x3f, 0xfb, 0x9f, 0x5f, 0x66, 0x67, 0x66, 0xe1, 0x3b, 0x5f,
	0x3d, 0x71, 0x8a, 0x81, 0xe6, 0x07, 0x1e, 0xf3, 0x94, 0xaf, 0x3e, 0x99, 0x2e, 0x90, 0xd1, 0xe6,
	0x1f, 0xc7, 0xf3, 0x9c, 0x25, 0x76, 0x44, 0x78, 0xc2, 0x9f, 0x3b, 0xc4, 0xdd, 0x6c, 0x3d, 0xea,
	0x19, 0x54, 0x2c, 0x8a, 0x81, 0x89, 0x6b, 0x8e, 0x94, 0x29, 0x6d, 0xf8, 0x62, 0x10, 0x46, 0x1a,
	0x85, 0x7f, 0x85, 0x76, 0xa5, 0x5b, 0xd3, 0xb6, 0x89, 0x5a, 0x94, 0xa8, 0xf5, 0xdd, 0x8d, 0x29,
	0x1c, 0xaa, 0x05, 0x55, 0xcb, 0xb7, 0x09, 0xc3, 0x64, 0xfa, 0x6f, 0x28, 0x85, 0x72, 0x64, 0x08,
	0x40, 0xd9, 0x94, 0x2a, 0xc6, 0x7e, 0xfe, 0x10, 0x7b, 0x0a, 0x3f, 0x13, 0xc0, 0xc1, 0x66, 0x64,
	0x64, 0x41, 0xd5, 0x1e, 0xd4, 0x53, 0xd6, 0x50, 0xb8, 0x64, 0x85, 0x4a, 0x13, 0xbe, 0x45, 0xdf,
	0x32, 0x25, 0xd6, 0xea, 0x0d, 0xc0, 0x98, 0x33, 0x9f, 0xb3, 0x30, 0x12, 0xa2, 0xef, 0x19, 0x61,
	0x9c, 0x0a, 0x5f, 0xd1, 0x94, 0xea, 0x88, 0x7a, 0x87, 0xf0, 0x37, 0x5d, 0xaf, 0x3d, 0x0e, 0x1c,
	0xe2, 0xce, 0x5f, 0x09, 0x9b, 0x7b, 0xae, 0x72, 0x02, 0x3f, 0x92, 0x7a, 0x64, 0xcb, 0x82, 0xf6,
	0xa2, 0xdd, 0xb7, 0x22, 0x94, 0xac, 0x95, 0xa8, 0x69, 0x08, 0xca, 0x15, 0x8a, 0xf2, 0x42, 0x9a,
	0x45, 0x71, 0x4a, 0x28, 0x2a, 0x0d, 0x4d, 0x0e, 0x53, 0xdb, 0x6b, 0x4f, 0xf3, 0x57, 0x7c, 0xb2,
	0xbb, 0x98, 0xfa, 0x49, 0xe9, 0x0b, 0xcc, 0xf5, 0x9c, 0x8a, 0x40, 0x84, 0xa9, 0x1d, 0xc2, 0x64,
	0x21, 0x2e, 0xa1, 0xaa, 0x07, 0x28, 0x47, 0x9c, 0x97, 0xb0, 0x5b, 0x92, 0x5c, 0x04, 0x03, 0xaa,
	0x06, 0x2e, 0x31, 0x4d, 0x38, 0xba, 0x19, 0xe7, 0x50, 0xd6, 0x67, 0x38, 0x5d, 0x84, 0x23, 0x3b,
	0xee, 0xff, 0x3a, 0xd4, 0xe4, 0x34, 0x86, 0x6b, 0x4e, 0x96, 0x34, 0xe7, 0x25, 0xea, 0xfa, 0x8c,
	0xb8, 0x0e, 0xde, 0x12, 0x4a, 0x5f, 0xbc, 0xc0, 0xce, 0x45, 0xb9, 0x83, 0x46, 0xbc, 0x18, 0xd1,
	0x3e, 0x47, 0xa0, 0xd6, 0xe1, 0x8e, 0x44, 0xb6, 0x2c, 0xe4, 0x23, 0xb4, 0x12, 0xbb, 0x96, 0xdc,
	0xc9, 0x08, 0xfc, 0x3f, 0xa3, 0xd5, 0x29, 0x73, 0x06, 0x7e, 0x50, 0x79, 0x28, 0x6b, 0x17, 0xf2,
	0x64, 0x52, 0x12, 0xaf, 0xa7, 0xf7, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x77, 0xbf, 0x76, 0x31, 0xa5,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UmUserClient is the client API for UmUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UmUserClient interface {
	GetUserByIdUsecase(ctx context.Context, in *UserRequestByID, opts ...grpc.CallOption) (*OutputUser, error)
	GetListUserUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error)
	CreateUserUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error)
	UpdateUserUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error)
	DeleteUserUsecase(ctx context.Context, in *UserRequestByID, opts ...grpc.CallOption) (*OutputUser, error)
	CheckData(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error)
	GetUserEqualsUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error)
	ChangePasswordUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error)
	GetUserByUsernameUsecase(ctx context.Context, in *UserRequestByUsername, opts ...grpc.CallOption) (*OutputUser, error)
	GetUserByIdOrganizationUsecase(ctx context.Context, in *UserRequestByIdOrganization, opts ...grpc.CallOption) (*OutputUser, error)
}

type umUserClient struct {
	cc *grpc.ClientConn
}

func NewUmUserClient(cc *grpc.ClientConn) UmUserClient {
	return &umUserClient{cc}
}

func (c *umUserClient) GetUserByIdUsecase(ctx context.Context, in *UserRequestByID, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/GetUserByIdUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) GetListUserUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/GetListUserUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) CreateUserUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/CreateUserUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) UpdateUserUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/UpdateUserUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) DeleteUserUsecase(ctx context.Context, in *UserRequestByID, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/DeleteUserUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) CheckData(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/CheckData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) GetUserEqualsUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/GetUserEqualsUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) ChangePasswordUsecase(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/ChangePasswordUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) GetUserByUsernameUsecase(ctx context.Context, in *UserRequestByUsername, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/GetUserByUsernameUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *umUserClient) GetUserByIdOrganizationUsecase(ctx context.Context, in *UserRequestByIdOrganization, opts ...grpc.CallOption) (*OutputUser, error) {
	out := new(OutputUser)
	err := c.cc.Invoke(ctx, "/packets.UmUser/GetUserByIdOrganizationUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UmUserServer is the server API for UmUser service.
type UmUserServer interface {
	GetUserByIdUsecase(context.Context, *UserRequestByID) (*OutputUser, error)
	GetListUserUsecase(context.Context, *UserRequest) (*OutputUser, error)
	CreateUserUsecase(context.Context, *UserRequest) (*OutputUser, error)
	UpdateUserUsecase(context.Context, *UserRequest) (*OutputUser, error)
	DeleteUserUsecase(context.Context, *UserRequestByID) (*OutputUser, error)
	CheckData(context.Context, *UserRequest) (*OutputUser, error)
	GetUserEqualsUsecase(context.Context, *UserRequest) (*OutputUser, error)
	ChangePasswordUsecase(context.Context, *UserRequest) (*OutputUser, error)
	GetUserByUsernameUsecase(context.Context, *UserRequestByUsername) (*OutputUser, error)
	GetUserByIdOrganizationUsecase(context.Context, *UserRequestByIdOrganization) (*OutputUser, error)
}

// UnimplementedUmUserServer can be embedded to have forward compatible implementations.
type UnimplementedUmUserServer struct {
}

func (*UnimplementedUmUserServer) GetUserByIdUsecase(ctx context.Context, req *UserRequestByID) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByIdUsecase not implemented")
}
func (*UnimplementedUmUserServer) GetListUserUsecase(ctx context.Context, req *UserRequest) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserUsecase not implemented")
}
func (*UnimplementedUmUserServer) CreateUserUsecase(ctx context.Context, req *UserRequest) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserUsecase not implemented")
}
func (*UnimplementedUmUserServer) UpdateUserUsecase(ctx context.Context, req *UserRequest) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserUsecase not implemented")
}
func (*UnimplementedUmUserServer) DeleteUserUsecase(ctx context.Context, req *UserRequestByID) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserUsecase not implemented")
}
func (*UnimplementedUmUserServer) CheckData(ctx context.Context, req *UserRequest) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckData not implemented")
}
func (*UnimplementedUmUserServer) GetUserEqualsUsecase(ctx context.Context, req *UserRequest) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEqualsUsecase not implemented")
}
func (*UnimplementedUmUserServer) ChangePasswordUsecase(ctx context.Context, req *UserRequest) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswordUsecase not implemented")
}
func (*UnimplementedUmUserServer) GetUserByUsernameUsecase(ctx context.Context, req *UserRequestByUsername) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsernameUsecase not implemented")
}
func (*UnimplementedUmUserServer) GetUserByIdOrganizationUsecase(ctx context.Context, req *UserRequestByIdOrganization) (*OutputUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByIdOrganizationUsecase not implemented")
}

func RegisterUmUserServer(s *grpc.Server, srv UmUserServer) {
	s.RegisterService(&_UmUser_serviceDesc, srv)
}

func _UmUser_GetUserByIdUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).GetUserByIdUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/GetUserByIdUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).GetUserByIdUsecase(ctx, req.(*UserRequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_GetListUserUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).GetListUserUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/GetListUserUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).GetListUserUsecase(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_CreateUserUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).CreateUserUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/CreateUserUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).CreateUserUsecase(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_UpdateUserUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).UpdateUserUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/UpdateUserUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).UpdateUserUsecase(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_DeleteUserUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).DeleteUserUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/DeleteUserUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).DeleteUserUsecase(ctx, req.(*UserRequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_CheckData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).CheckData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/CheckData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).CheckData(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_GetUserEqualsUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).GetUserEqualsUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/GetUserEqualsUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).GetUserEqualsUsecase(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_ChangePasswordUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).ChangePasswordUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/ChangePasswordUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).ChangePasswordUsecase(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_GetUserByUsernameUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequestByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).GetUserByUsernameUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/GetUserByUsernameUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).GetUserByUsernameUsecase(ctx, req.(*UserRequestByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _UmUser_GetUserByIdOrganizationUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequestByIdOrganization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmUserServer).GetUserByIdOrganizationUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.UmUser/GetUserByIdOrganizationUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmUserServer).GetUserByIdOrganizationUsecase(ctx, req.(*UserRequestByIdOrganization))
	}
	return interceptor(ctx, in, info, handler)
}

var _UmUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "packets.UmUser",
	HandlerType: (*UmUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByIdUsecase",
			Handler:    _UmUser_GetUserByIdUsecase_Handler,
		},
		{
			MethodName: "GetListUserUsecase",
			Handler:    _UmUser_GetListUserUsecase_Handler,
		},
		{
			MethodName: "CreateUserUsecase",
			Handler:    _UmUser_CreateUserUsecase_Handler,
		},
		{
			MethodName: "UpdateUserUsecase",
			Handler:    _UmUser_UpdateUserUsecase_Handler,
		},
		{
			MethodName: "DeleteUserUsecase",
			Handler:    _UmUser_DeleteUserUsecase_Handler,
		},
		{
			MethodName: "CheckData",
			Handler:    _UmUser_CheckData_Handler,
		},
		{
			MethodName: "GetUserEqualsUsecase",
			Handler:    _UmUser_GetUserEqualsUsecase_Handler,
		},
		{
			MethodName: "ChangePasswordUsecase",
			Handler:    _UmUser_ChangePasswordUsecase_Handler,
		},
		{
			MethodName: "GetUserByUsernameUsecase",
			Handler:    _UmUser_GetUserByUsernameUsecase_Handler,
		},
		{
			MethodName: "GetUserByIdOrganizationUsecase",
			Handler:    _UmUser_GetUserByIdOrganizationUsecase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "um_user.proto",
}
