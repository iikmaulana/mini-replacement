// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer_replacement.proto

package packets

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CustomerReplacementRequest struct {
	Data                 *any.Any `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerReplacementRequest) Reset()         { *m = CustomerReplacementRequest{} }
func (m *CustomerReplacementRequest) String() string { return proto.CompactTextString(m) }
func (*CustomerReplacementRequest) ProtoMessage()    {}
func (*CustomerReplacementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8e00b8464576eef, []int{0}
}

func (m *CustomerReplacementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerReplacementRequest.Unmarshal(m, b)
}
func (m *CustomerReplacementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerReplacementRequest.Marshal(b, m, deterministic)
}
func (m *CustomerReplacementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerReplacementRequest.Merge(m, src)
}
func (m *CustomerReplacementRequest) XXX_Size() int {
	return xxx_messageInfo_CustomerReplacementRequest.Size(m)
}
func (m *CustomerReplacementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerReplacementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerReplacementRequest proto.InternalMessageInfo

func (m *CustomerReplacementRequest) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type CustomerReplacementOutput struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Data                 *any.Any `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerReplacementOutput) Reset()         { *m = CustomerReplacementOutput{} }
func (m *CustomerReplacementOutput) String() string { return proto.CompactTextString(m) }
func (*CustomerReplacementOutput) ProtoMessage()    {}
func (*CustomerReplacementOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8e00b8464576eef, []int{1}
}

func (m *CustomerReplacementOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerReplacementOutput.Unmarshal(m, b)
}
func (m *CustomerReplacementOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerReplacementOutput.Marshal(b, m, deterministic)
}
func (m *CustomerReplacementOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerReplacementOutput.Merge(m, src)
}
func (m *CustomerReplacementOutput) XXX_Size() int {
	return xxx_messageInfo_CustomerReplacementOutput.Size(m)
}
func (m *CustomerReplacementOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerReplacementOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerReplacementOutput proto.InternalMessageInfo

func (m *CustomerReplacementOutput) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CustomerReplacementOutput) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CustomerReplacementRequest)(nil), "packets.CustomerReplacementRequest")
	proto.RegisterType((*CustomerReplacementOutput)(nil), "packets.CustomerReplacementOutput")
}

func init() { proto.RegisterFile("customer_replacement.proto", fileDescriptor_c8e00b8464576eef) }

var fileDescriptor_c8e00b8464576eef = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0xd2, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0x06, 0xf0, 0xff, 0xfe, 0xb8, 0x89, 0x19, 0x88, 0x44, 0x11, 0xd7, 0x93, 0xd4, 0xcb, 0x4e,
	0x19, 0xcc, 0xa3, 0xa7, 0xba, 0xe1, 0x6d, 0x28, 0x11, 0x2f, 0xca, 0x90, 0xb7, 0xdd, 0x6b, 0x37,
	0x6c, 0x93, 0x98, 0xbc, 0x51, 0xf6, 0x85, 0xfc, 0x9c, 0xb2, 0xa6, 0xea, 0x65, 0xea, 0xa5, 0x3d,
	0xb6, 0x3c, 0xfc, 0x78, 0xde, 0x87, 0xb0, 0x28, 0xf3, 0x8e, 0x74, 0x89, 0xf6, 0xd1, 0xa2, 0x29,
	0x20, 0xc3, 0x12, 0x15, 0x09, 0x63, 0x35, 0x69, 0xbe, 0x6b, 0x20, 0x7b, 0x46, 0x72, 0xd1, 0x20,
	0xd7, 0x3a, 0x2f, 0x70, 0x54, 0xfd, 0x4e, 0xfd, 0xd3, 0x08, 0xd4, 0x3a, 0x64, 0xe2, 0x2b, 0x16,
	0x4d, 0x6a, 0x41, 0x7e, 0x03, 0x12, 0x5f, 0x3c, 0x3a, 0xe2, 0x43, 0xb6, 0x33, 0x05, 0x82, 0x93,
	0xce, 0x69, 0x67, 0xd8, 0x1f, 0x1f, 0x89, 0xe0, 0x88, 0x4f, 0x47, 0x24, 0x6a, 0x2d, 0xab, 0x44,
	0x3c, 0x67, 0x83, 0x2d, 0xce, 0xb5, 0x27, 0xe3, 0x89, 0x1f, 0xb3, 0xde, 0x2d, 0x01, 0x79, 0x57,
	0x41, 0x5d, 0x59, 0x7f, 0x7d, 0xf1, 0xff, 0xff, 0xe2, 0xc7, 0xef, 0x5d, 0x76, 0xb8, 0xc5, 0xe7,
	0x0f, 0x6c, 0xff, 0xce, 0x2c, 0x80, 0x70, 0x46, 0x33, 0x2c, 0x53, 0xb4, 0xfc, 0x4c, 0xd4, 0x57,
	0x8b, 0x9f, 0xef, 0x8a, 0xe2, 0xdf, 0x42, 0xa1, 0x74, 0xfc, 0x6f, 0x83, 0x4f, 0x2c, 0xb6, 0x84,
	0xcf, 0xd9, 0x41, 0x68, 0x9e, 0x78, 0x5a, 0x4a, 0xaf, 0x54, 0xe3, 0x7c, 0xe8, 0xde, 0x0e, 0xbf,
	0xd9, 0xdd, 0xa1, 0x4d, 0x32, 0x5a, 0xbd, 0x02, 0xad, 0xb4, 0x6a, 0x7a, 0xf7, 0x25, 0xa8, 0x1c,
	0x6f, 0xc0, 0xb9, 0x37, 0x6d, 0x17, 0x0d, 0x0f, 0x33, 0xc5, 0x02, 0x5b, 0x1a, 0xe6, 0xb2, 0x7f,
	0xbf, 0x27, 0x2e, 0xea, 0x60, 0xda, 0xab, 0x5e, 0xf2, 0xf9, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x75, 0x68, 0x1d, 0x03, 0xa5, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerReplacementClient is the client API for CustomerReplacement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerReplacementClient interface {
	UpdateMtMember(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error)
	CreateMtMember(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error)
	UpdateAuthRunner(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error)
	CreateAuthRunner(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error)
	UserActivation(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error)
	ChangePassword(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error)
	DeleteAuthRunner(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error)
}

type customerReplacementClient struct {
	cc *grpc.ClientConn
}

func NewCustomerReplacementClient(cc *grpc.ClientConn) CustomerReplacementClient {
	return &customerReplacementClient{cc}
}

func (c *customerReplacementClient) UpdateMtMember(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error) {
	out := new(CustomerReplacementOutput)
	err := c.cc.Invoke(ctx, "/packets.CustomerReplacement/UpdateMtMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerReplacementClient) CreateMtMember(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error) {
	out := new(CustomerReplacementOutput)
	err := c.cc.Invoke(ctx, "/packets.CustomerReplacement/CreateMtMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerReplacementClient) UpdateAuthRunner(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error) {
	out := new(CustomerReplacementOutput)
	err := c.cc.Invoke(ctx, "/packets.CustomerReplacement/UpdateAuthRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerReplacementClient) CreateAuthRunner(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error) {
	out := new(CustomerReplacementOutput)
	err := c.cc.Invoke(ctx, "/packets.CustomerReplacement/CreateAuthRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerReplacementClient) UserActivation(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error) {
	out := new(CustomerReplacementOutput)
	err := c.cc.Invoke(ctx, "/packets.CustomerReplacement/UserActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerReplacementClient) ChangePassword(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error) {
	out := new(CustomerReplacementOutput)
	err := c.cc.Invoke(ctx, "/packets.CustomerReplacement/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerReplacementClient) DeleteAuthRunner(ctx context.Context, in *CustomerReplacementRequest, opts ...grpc.CallOption) (*CustomerReplacementOutput, error) {
	out := new(CustomerReplacementOutput)
	err := c.cc.Invoke(ctx, "/packets.CustomerReplacement/DeleteAuthRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerReplacementServer is the server API for CustomerReplacement service.
type CustomerReplacementServer interface {
	UpdateMtMember(context.Context, *CustomerReplacementRequest) (*CustomerReplacementOutput, error)
	CreateMtMember(context.Context, *CustomerReplacementRequest) (*CustomerReplacementOutput, error)
	UpdateAuthRunner(context.Context, *CustomerReplacementRequest) (*CustomerReplacementOutput, error)
	CreateAuthRunner(context.Context, *CustomerReplacementRequest) (*CustomerReplacementOutput, error)
	UserActivation(context.Context, *CustomerReplacementRequest) (*CustomerReplacementOutput, error)
	ChangePassword(context.Context, *CustomerReplacementRequest) (*CustomerReplacementOutput, error)
	DeleteAuthRunner(context.Context, *CustomerReplacementRequest) (*CustomerReplacementOutput, error)
}

// UnimplementedCustomerReplacementServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerReplacementServer struct {
}

func (*UnimplementedCustomerReplacementServer) UpdateMtMember(ctx context.Context, req *CustomerReplacementRequest) (*CustomerReplacementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMtMember not implemented")
}
func (*UnimplementedCustomerReplacementServer) CreateMtMember(ctx context.Context, req *CustomerReplacementRequest) (*CustomerReplacementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMtMember not implemented")
}
func (*UnimplementedCustomerReplacementServer) UpdateAuthRunner(ctx context.Context, req *CustomerReplacementRequest) (*CustomerReplacementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthRunner not implemented")
}
func (*UnimplementedCustomerReplacementServer) CreateAuthRunner(ctx context.Context, req *CustomerReplacementRequest) (*CustomerReplacementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthRunner not implemented")
}
func (*UnimplementedCustomerReplacementServer) UserActivation(ctx context.Context, req *CustomerReplacementRequest) (*CustomerReplacementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActivation not implemented")
}
func (*UnimplementedCustomerReplacementServer) ChangePassword(ctx context.Context, req *CustomerReplacementRequest) (*CustomerReplacementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedCustomerReplacementServer) DeleteAuthRunner(ctx context.Context, req *CustomerReplacementRequest) (*CustomerReplacementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthRunner not implemented")
}

func RegisterCustomerReplacementServer(s *grpc.Server, srv CustomerReplacementServer) {
	s.RegisterService(&_CustomerReplacement_serviceDesc, srv)
}

func _CustomerReplacement_UpdateMtMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerReplacementServer).UpdateMtMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.CustomerReplacement/UpdateMtMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerReplacementServer).UpdateMtMember(ctx, req.(*CustomerReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerReplacement_CreateMtMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerReplacementServer).CreateMtMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.CustomerReplacement/CreateMtMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerReplacementServer).CreateMtMember(ctx, req.(*CustomerReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerReplacement_UpdateAuthRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerReplacementServer).UpdateAuthRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.CustomerReplacement/UpdateAuthRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerReplacementServer).UpdateAuthRunner(ctx, req.(*CustomerReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerReplacement_CreateAuthRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerReplacementServer).CreateAuthRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.CustomerReplacement/CreateAuthRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerReplacementServer).CreateAuthRunner(ctx, req.(*CustomerReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerReplacement_UserActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerReplacementServer).UserActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.CustomerReplacement/UserActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerReplacementServer).UserActivation(ctx, req.(*CustomerReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerReplacement_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerReplacementServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.CustomerReplacement/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerReplacementServer).ChangePassword(ctx, req.(*CustomerReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerReplacement_DeleteAuthRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerReplacementServer).DeleteAuthRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.CustomerReplacement/DeleteAuthRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerReplacementServer).DeleteAuthRunner(ctx, req.(*CustomerReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerReplacement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "packets.CustomerReplacement",
	HandlerType: (*CustomerReplacementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMtMember",
			Handler:    _CustomerReplacement_UpdateMtMember_Handler,
		},
		{
			MethodName: "CreateMtMember",
			Handler:    _CustomerReplacement_CreateMtMember_Handler,
		},
		{
			MethodName: "UpdateAuthRunner",
			Handler:    _CustomerReplacement_UpdateAuthRunner_Handler,
		},
		{
			MethodName: "CreateAuthRunner",
			Handler:    _CustomerReplacement_CreateAuthRunner_Handler,
		},
		{
			MethodName: "UserActivation",
			Handler:    _CustomerReplacement_UserActivation_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _CustomerReplacement_ChangePassword_Handler,
		},
		{
			MethodName: "DeleteAuthRunner",
			Handler:    _CustomerReplacement_DeleteAuthRunner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer_replacement.proto",
}
