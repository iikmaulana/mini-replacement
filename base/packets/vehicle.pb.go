// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vehicle.proto

package packets

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VehRequest struct {
	Data                 *anypb.Any `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VehRequest) Reset()         { *m = VehRequest{} }
func (m *VehRequest) String() string { return proto.CompactTextString(m) }
func (*VehRequest) ProtoMessage()    {}
func (*VehRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_416ab71f8212867c, []int{0}
}

func (m *VehRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VehRequest.Unmarshal(m, b)
}
func (m *VehRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VehRequest.Marshal(b, m, deterministic)
}
func (m *VehRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VehRequest.Merge(m, src)
}
func (m *VehRequest) XXX_Size() int {
	return xxx_messageInfo_VehRequest.Size(m)
}
func (m *VehRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VehRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VehRequest proto.InternalMessageInfo

func (m *VehRequest) GetData() *anypb.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type VehRequestByChassis struct {
	ChassisNumber        string   `protobuf:"bytes,1,opt,name=ChassisNumber,proto3" json:"ChassisNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VehRequestByChassis) Reset()         { *m = VehRequestByChassis{} }
func (m *VehRequestByChassis) String() string { return proto.CompactTextString(m) }
func (*VehRequestByChassis) ProtoMessage()    {}
func (*VehRequestByChassis) Descriptor() ([]byte, []int) {
	return fileDescriptor_416ab71f8212867c, []int{1}
}

func (m *VehRequestByChassis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VehRequestByChassis.Unmarshal(m, b)
}
func (m *VehRequestByChassis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VehRequestByChassis.Marshal(b, m, deterministic)
}
func (m *VehRequestByChassis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VehRequestByChassis.Merge(m, src)
}
func (m *VehRequestByChassis) XXX_Size() int {
	return xxx_messageInfo_VehRequestByChassis.Size(m)
}
func (m *VehRequestByChassis) XXX_DiscardUnknown() {
	xxx_messageInfo_VehRequestByChassis.DiscardUnknown(m)
}

var xxx_messageInfo_VehRequestByChassis proto.InternalMessageInfo

func (m *VehRequestByChassis) GetChassisNumber() string {
	if m != nil {
		return m.ChassisNumber
	}
	return ""
}

type VehOutput struct {
	Status               int32      `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Data                 *anypb.Any `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VehOutput) Reset()         { *m = VehOutput{} }
func (m *VehOutput) String() string { return proto.CompactTextString(m) }
func (*VehOutput) ProtoMessage()    {}
func (*VehOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_416ab71f8212867c, []int{2}
}

func (m *VehOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VehOutput.Unmarshal(m, b)
}
func (m *VehOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VehOutput.Marshal(b, m, deterministic)
}
func (m *VehOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VehOutput.Merge(m, src)
}
func (m *VehOutput) XXX_Size() int {
	return xxx_messageInfo_VehOutput.Size(m)
}
func (m *VehOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_VehOutput.DiscardUnknown(m)
}

var xxx_messageInfo_VehOutput proto.InternalMessageInfo

func (m *VehOutput) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *VehOutput) GetData() *anypb.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*VehRequest)(nil), "packets.VehRequest")
	proto.RegisterType((*VehRequestByChassis)(nil), "packets.VehRequestByChassis")
	proto.RegisterType((*VehOutput)(nil), "packets.VehOutput")
}

func init() { proto.RegisterFile("vehicle.proto", fileDescriptor_416ab71f8212867c) }

var fileDescriptor_416ab71f8212867c = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4b, 0xcd, 0xc8,
	0x4c, 0xce, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x48, 0x4c, 0xce, 0x4e,
	0x2d, 0x29, 0x96, 0x92, 0x4c, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x27, 0x95, 0xa6,
	0xe9, 0x27, 0xe6, 0x55, 0x42, 0xd4, 0x28, 0x99, 0x71, 0x71, 0x85, 0xa5, 0x66, 0x04, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x69, 0x70, 0xb1, 0xb8, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x1b, 0x89, 0xe8, 0x41, 0xf4, 0xe9, 0xc1, 0xf4, 0xe9, 0x39, 0xe6, 0x55, 0x06, 0x81,
	0x55, 0x28, 0x59, 0x73, 0x09, 0x23, 0xf4, 0x39, 0x55, 0x3a, 0x67, 0x24, 0x16, 0x17, 0x67, 0x16,
	0x0b, 0xa9, 0x70, 0xf1, 0x42, 0x99, 0x7e, 0xa5, 0xb9, 0x49, 0xa9, 0x45, 0x60, 0x93, 0x38, 0x83,
	0x50, 0x05, 0x95, 0x7c, 0xb9, 0x38, 0xc3, 0x52, 0x33, 0xfc, 0x4b, 0x4b, 0x0a, 0x4a, 0x4b, 0x84,
	0xc4, 0xb8, 0xd8, 0x82, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0xc1, 0x6a, 0x59, 0x83, 0xa0, 0x3c, 0xb8,
	0x5b, 0x98, 0x08, 0xb9, 0xc5, 0xa8, 0x85, 0x89, 0x8b, 0x3d, 0x0c, 0xe2, 0x73, 0x21, 0x0b, 0x2e,
	0x6e, 0x28, 0x33, 0xde, 0x3d, 0xb5, 0x44, 0x48, 0x58, 0x0f, 0x1a, 0x06, 0x7a, 0x08, 0xd7, 0x4a,
	0x09, 0x21, 0x0b, 0x42, 0x5c, 0xa1, 0xc4, 0x20, 0xe4, 0xc5, 0x25, 0x82, 0xa4, 0x13, 0xe1, 0x25,
	0x19, 0x2c, 0x46, 0xc0, 0x65, 0x71, 0x98, 0x85, 0xe4, 0x0a, 0xc7, 0x94, 0x14, 0x52, 0x5c, 0x61,
	0xc9, 0xc5, 0x03, 0xd3, 0xe9, 0x9a, 0x92, 0x49, 0x8a, 0x07, 0x9c, 0xb8, 0xa3, 0x38, 0xf5, 0xac,
	0xa1, 0x12, 0x49, 0x6c, 0xe0, 0x70, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x7b, 0xae,
	0xad, 0x13, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VehicleClient is the client API for Vehicle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VehicleClient interface {
	Vehicle_Get(ctx context.Context, in *VehRequest, opts ...grpc.CallOption) (*VehOutput, error)
	Vehicle_GetByChassis(ctx context.Context, in *VehRequestByChassis, opts ...grpc.CallOption) (*VehOutput, error)
	// rpc Vehicle_GetStatus(VehRequestByChassis) returns(VehOutput){}
	Vehicle_Add(ctx context.Context, in *VehRequest, opts ...grpc.CallOption) (*VehOutput, error)
	Vehicle_Edit(ctx context.Context, in *VehRequest, opts ...grpc.CallOption) (*VehOutput, error)
}

type vehicleClient struct {
	cc *grpc.ClientConn
}

func NewVehicleClient(cc *grpc.ClientConn) VehicleClient {
	return &vehicleClient{cc}
}

func (c *vehicleClient) Vehicle_Get(ctx context.Context, in *VehRequest, opts ...grpc.CallOption) (*VehOutput, error) {
	out := new(VehOutput)
	err := c.cc.Invoke(ctx, "/packets.Vehicle/Vehicle_Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleClient) Vehicle_GetByChassis(ctx context.Context, in *VehRequestByChassis, opts ...grpc.CallOption) (*VehOutput, error) {
	out := new(VehOutput)
	err := c.cc.Invoke(ctx, "/packets.Vehicle/Vehicle_GetByChassis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleClient) Vehicle_Add(ctx context.Context, in *VehRequest, opts ...grpc.CallOption) (*VehOutput, error) {
	out := new(VehOutput)
	err := c.cc.Invoke(ctx, "/packets.Vehicle/Vehicle_Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleClient) Vehicle_Edit(ctx context.Context, in *VehRequest, opts ...grpc.CallOption) (*VehOutput, error) {
	out := new(VehOutput)
	err := c.cc.Invoke(ctx, "/packets.Vehicle/Vehicle_Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehicleServer is the server API for Vehicle service.
type VehicleServer interface {
	Vehicle_Get(context.Context, *VehRequest) (*VehOutput, error)
	Vehicle_GetByChassis(context.Context, *VehRequestByChassis) (*VehOutput, error)
	// rpc Vehicle_GetStatus(VehRequestByChassis) returns(VehOutput){}
	Vehicle_Add(context.Context, *VehRequest) (*VehOutput, error)
	Vehicle_Edit(context.Context, *VehRequest) (*VehOutput, error)
}

// UnimplementedVehicleServer can be embedded to have forward compatible implementations.
type UnimplementedVehicleServer struct {
}

func (*UnimplementedVehicleServer) Vehicle_Get(ctx context.Context, req *VehRequest) (*VehOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vehicle_Get not implemented")
}
func (*UnimplementedVehicleServer) Vehicle_GetByChassis(ctx context.Context, req *VehRequestByChassis) (*VehOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vehicle_GetByChassis not implemented")
}
func (*UnimplementedVehicleServer) Vehicle_Add(ctx context.Context, req *VehRequest) (*VehOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vehicle_Add not implemented")
}
func (*UnimplementedVehicleServer) Vehicle_Edit(ctx context.Context, req *VehRequest) (*VehOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vehicle_Edit not implemented")
}

func RegisterVehicleServer(s *grpc.Server, srv VehicleServer) {
	s.RegisterService(&_Vehicle_serviceDesc, srv)
}

func _Vehicle_Vehicle_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServer).Vehicle_Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Vehicle/Vehicle_Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServer).Vehicle_Get(ctx, req.(*VehRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vehicle_Vehicle_GetByChassis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehRequestByChassis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServer).Vehicle_GetByChassis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Vehicle/Vehicle_GetByChassis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServer).Vehicle_GetByChassis(ctx, req.(*VehRequestByChassis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vehicle_Vehicle_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServer).Vehicle_Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Vehicle/Vehicle_Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServer).Vehicle_Add(ctx, req.(*VehRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vehicle_Vehicle_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServer).Vehicle_Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Vehicle/Vehicle_Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServer).Vehicle_Edit(ctx, req.(*VehRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vehicle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Vehicle",
	HandlerType: (*VehicleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vehicle_Get",
			Handler:    _Vehicle_Vehicle_Get_Handler,
		},
		{
			MethodName: "Vehicle_GetByChassis",
			Handler:    _Vehicle_Vehicle_GetByChassis_Handler,
		},
		{
			MethodName: "Vehicle_Add",
			Handler:    _Vehicle_Vehicle_Add_Handler,
		},
		{
			MethodName: "Vehicle_Edit",
			Handler:    _Vehicle_Vehicle_Edit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vehicle.proto",
}
